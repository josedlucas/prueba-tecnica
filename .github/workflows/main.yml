name: Deploy Serverless App

on:
    push:
        branches:
            - main
jobs:
    deploy:
        runs-on: ubuntu-latest
        steps:
            -   name: Checkout code
                uses: actions/checkout@v2

            -   name: Lambda Layer Dependencies python
                run: |
                    mkdir -p layers/tools
                    cp ./aws_requirements.txt ./layers/tools
                    cd layers/tools
                    pip install -t python/lib/python3.9/site-packages -r aws_requirements.txt
                    cd ../..

            -   name: Install Serverless Framework
                run: npm install -g serverless

            -   name: Set up Serverless Framework
                run: sls config credentials --provider aws --key ${{ secrets.AWS_ACCESS_KEY_ID }} --secret ${{ secrets.AWS_SECRET_ACCESS_KEY }}

            -   name: Deploy Serverless App
                run: sls deploy --stage dev
    deploy_docker_image:
        runs-on: ubuntu-latest
        steps:
            -   name: Checkout
                uses: actions/checkout@v3

            -   name: Congigure AWS credentials
                uses: aws-actions/configure-aws-credentials@v1
                with:
                    aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                    aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                    aws-region: us-east-1

            -   name: Login to Amazon ECR
                id: login-ecr
                uses: aws-actions/amazon-ecr-login@v1

            -   name: Build, tag, and push image to Amazon ECR
                id: build-image
                env:
                    ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                    ECR_REPOSITORY: tecnicaltest
                    IMAGE_TAG: last
                run: |
                    docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
                    docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
                    echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

            -   name: Fill in the new image ID in the Amazon ECS task definition
                id: task-def
                uses: aws-actions/amazon-ecs-render-task-definition@v1
                with:
                    task-definition: tecnicaltes-revision1.json
                    container-name: ${{ env.ECR_REPOSITORY }}
                    image: ${{ steps.build-image.outputs.image }}

            -   name: Deploy Amazon ECS task definition
                uses: aws-actions/amazon-ecs-deploy-task-definition@v1
                with:
                    task-definition: ${{ steps.task-def.outputs.task-definition }}
                    service: ${{ env.ECR_REPOSITORY }}
                    cluster: ${{ env.ECR_REPOSITORY }}
                    wait-for-service-stability: true